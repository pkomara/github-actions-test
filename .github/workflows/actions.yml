name : user-defined actions
on : pull_request

jobs :
  testing-actions :
    runs-on : ubuntu-latest
    # if : false
    steps :
      - uses : actions/checkout@v2
      - run : |
         pwd
         ls -a
      - uses : ./.github/actions/issues
        id : issue 
        with :
          token : ${{ secrets.GITHUB_TOKEN }}
          title : Title
          body : Body
          assignees : |
            pkomara
      - name: test
        env:
        #   GITHUB_CONTEXT: ${{ toJson(github) }}
          PR_TITLE: ${{ github.event.pull_request.title }}  
        run : |
          # echo ${{ steps.issue.outputs.issue }}
          # echo "$GITHUB_CONTEXT"
          # echo ${GITHUB_HEAD_REF}
          # echo ${{ github.actor }}
          # echo "USER=${{github.actor}}" >> $GITHUB_ENV          
          # echo ${{ github.repositoryUrl }}
          echo "$PR_TITLE"
          REVISION=$(echo "$PR_TITLE" | sed -n 's/.*revision://pI' | cut -d ' ' -f1)
          history="REVISION        UPDATED                         STATUS          CHART                   APP VERSION     DESCRIPTION
          1               Thu Jun  4 17:56:28 2020        superseded      voice-callthread-9.0.01 1               Install complete
          2               Thu Jun  4 18:50:05 2020        superseded      voice-callthread-9.0.01 1111               Upgrade complete
          3               Sun Jun 14 18:25:13 2020        deployed        voice-callthread-9.0.01 1               Upgrade complete
          4               Thu Jun  4 17:56:28 2020        superseded      voice-callthread-9.0.01 1               Install complete
          5               Thu Jun  4 18:50:05 2020        superseded      voice-callthread-9.0.01 1               Upgrade complete
          6               Sun Jun 14 18:25:13 2020        deployed        voice-callthread-9.0.02 1234               Upgrade complete"
          echo "$REVISION"
          echo "$history"
          if [[ -z "$REVISION" ]];
          then
            appVersion=$(echo "$history" | awk  'END {print  $9}' )
            helmVersion=$(echo "$history" | awk  'END {tgzExtn = ".tgz"  ; print  $8tgzExtn}')
            echo 'in if'
          else
            appVersion=$(echo "$history" | awk  'NR==2 ,NR==$NR {print $1 " "  $9}' | awk -v REVISION="$REVISION" '{if($1 == REVISION) print $2}')
            helmVersion=$(echo "$history" | awk 'NR==2 ,NR==$NR {print $1 " "  $8}' | awk -v REVISION="$REVISION" '{if($1 == REVISION) { tgzExtn = ".tgz"  ; print $2tgzExtn}}')
            echo 'in else'  
          fi
          oldAppVersion=$(jq .version -r versions.json )
          oldHelmVersion=$(jq .helm_version -r versions.json)
          echo $appVersion
          echo $helmVersion
          sed -i "s/$oldAppVersion/$appVersion/g" versions.json
          sed -i "s/$oldHelmVersion/$helmVersion/g" versions.json
          chartVersion=$(echo $helmVersion| cut -d '-' -f3 | cut -d '.' -f1)
          echo $chartVersion
          cat versions.json  